/** mobile  */ @custom-media --mobile only screen and (width < 48em);
/** desktop */ @custom-media --desktop only screen and (width >= 48em);

/** xs-screen | 320px  */ @custom-media --xs-screen only screen and (width >= 20em);
/** sm-screen | 480px  */ @custom-media --sm-screen only screen and (width >= 30em);
/** md-screen | 600px  */ @custom-media --md-screen only screen and (width >= 37.5em);
/** lg-screen | 768px  */ @custom-media --lg-screen only screen and (width >= 48em);
/** xl-screen | 900px  */ @custom-media --xl-screen only screen and (width >= 56.25em);
/** 2x-screen | 1100px */ @custom-media --2x-screen only screen and (width >= 68.75em);
/** 3x-screen | 1300px */ @custom-media --3x-screen only screen and (width >= 81.25em);

:root {
  --header-font: "boucherie-block", monospace;
  --scrollbars: {
    &::-webkit-scrollbar-track {
      background-color: rgb(40, 40, 40);
    }

    &::-webkit-scrollbar {
      width: 0.25em;
      height: 0.25em;
      background-color: rgb(10, 160, 217);
    }

    &::-webkit-scrollbar-thumb {
      background-color: rgb(10, 160, 217);
    }
  }
}

@media (--mobile) {
  .desktop {
    display: none;
  }
}

@media (--desktop) {
  .mobile {
    display: none;
  }
}

/** GRAPH */
.graph {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  flex: 1 1 40vh;
  font-size: 1rem;
}
.graphTransform {
  transform: scaleY(-1);
}
.graphTransform text {
  transform: scaleY(-1);
}
/** END GRAPH */


/** PAGER */
.pagerControls,
.pagerButton,
.pagerSelect,
.pagerDocumentsPerPage {
  position: relative;
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  margin: 0 0.2em;
  padding: 0.1em 0.2em;
  font-family: monospace;
  font-size:0.9rem;
}

.pagerSelect {
  min-width: 2rem;
}

.documentsPerPage label {
  display: none;

  @media (--desktop) {
    margin-right: 5px;
    display: initial;
  }
}

/** END PAGER */


/** CARDS */

.cards .body {
  flex-direction: row;
  flex-wrap: wrap;
}

.cardsDocument {
  display: inline-flex;
  margin: 0.5em 0.75em;
  flex: 0 0 calc(100% - 1.5em - 4px);
  cursor: pointer;
  max-height: 33vh;

  overflow: auto;
  @apply --scrollbars;

  @media (--sm-screen) {
    margin: 0.25em;
    flex: 1 0 calc(50% - 1em - 4px);
  }

  @media (--md-screen) {
    margin: 0.25em;
    flex: 1 0 calc(33% - 1.5em - 4px);
  }

  @media (--lg-screen) {
    margin: 0.5em;
    flex: 1 0 calc(33% - 3em - 4px);

    &::-webkit-scrollbar {
      width: 0.5em;
      height: 0.5em;
    }
  }
}

.card {
  width: 100%;
}

.cardHeader {
  padding: 1px 10px;
}

.cardContent {
  padding: 1px 10px;
}

/** END CARDS */



/** ACCORDION */
.accordion .document {

  flex: 1 0 auto;
  //height: 100%;
  align-items: center;

}

.accordion .fill {
  flex: 0 0 0;
}

.accordionDocument {
  display:flex;
  flex: 0 1 auto;
  align-items: center;
  height: 100%;
}

.ttb .accordionDocument {
  flex-flow: column nowrap;
  width: 100%;
}

.ltr .accordionDocument {
  flex-flow: row nowrap;
  width: 100%;
}

.accordionHeader {
  cursor: pointer;
  display: flex;
  align-items: center;
  flex: 0 10 auto;
  border: 0;
}
.accordionHeader > * {
  width: 100%;
  display: flex;
  justify-content: space-between;
}

.ttb .accordionHeader {
  flex-flow: row nowrap;
  width: 100%;
  height: 100%;
  justify-content: space-between;
}

.ltr .accordionHeader {
  flex-flow: column nowrap;
  height: 100%;
  width: 100%;
  justify-content: center;
}

.accordionHeader:active {
  background-color: rgb(255, 100, 100);
}

.ltr .accordionHeader > * {
  writing-mode: vertical-lr;
}

.accordionContent {
  display: flex;
  flex-direction: column;
  flex: 10 0 auto;
  overflow: hidden;

  width: 100%;
  max-height:0;

  will-change: max-height;

  transition-property: max-height;
  transition-duration: 300ms;
  transition-timing-function: linear;
}

.ltr .accordionContent {
  flex-direction: row;
  max-height: initial;
  width: initial;
  height: 100%;
  max-width: 0;
  will-change: max-width;
  transition-property: max-width;
}

/** END ACCORDION */


.grid {
  position: relative;
  -webkit-overflow-scrolling: touch;
  display: flex;
  flex-direction: column;
  overflow: visible;

  /* Without this property, Chrome repaints the entire Grid any time a new row or column is added.
     Firefox only repaints the new row or column (regardless of this property).
     Safari and IE don't support the property at all. 

    commenting out for now due to causing overlap of 2 dropdowns in certain scenario (chrome)
     */
  /*will-change: transform;*/
}

:global(.react-grid-item) .grid.variableHeight {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.grid.fixedHeight {
  position: relative;
  flex: 1 0 auto;
}


.body {
/*  display: flex;
  flex-direction: column;
  height: 100%;*/
}

.ltr .body {
  flex-flow: row nowrap;
}

:global(.react-grid-item) .grid.variableHeight .body {
  flex: 0 1 auto;
  max-height:100%;
  overflow: auto;
  @apply --scrollbars;
}

.grid.fixedHeight .body {
  flex: 1 0 auto;
}


.gridHeader,
.gridFooter {
  display: flex;
  flex: 0 0 auto;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  border-right: 0;
  border-left: 0;
  margin: 0;
  font-weight: bold;
  padding-left: 6px;
  padding-right: 6px;


}

.gridFooter {
  font-size:0.85rem;

/*  @media (--lg-screen) {
    font-size:0.55rem;
  }
  @media (--xl-screen) {
    font-size:0.62rem;
  }
  @media (--2x-screen) {
    font-size:0.7rem;
  }*/
}



.fill {
  display: flex;
}

.gridFooter > * {
/*  display: inline-flex;*/
  flex-direction: row;
  align-items: space-between;
  justify-content: space-between;
  flex: 3 1 auto;
}

.gridFooter > *:first-child {
  justify-content: flex-start;
  flex: 1 1 auto;
}

.gridFooter > *:last-child {
  justify-content: flex-end;
  flex: 1 1 auto;
}


.document {
  display: flex;
  flex: 0 0 auto;
  width: 100%;
  font-size: 0.85rem;
  font-family: Lato;
}

.ltr .document {
  width: initial;
  height: calc(100% - 1px);
}


.document.primitive {
  flex-flow: row nowrap;
  //height: 100%;
}

.document.sectional {
  flex-flow: column nowrap;
  //height: 100%;
}

.ltr .document.primitive {
  flex-flow: column nowrap;
  border-width-top: 0;
}

.ltr .document.sectional {
  flex-flow: row nowrap;
}

.document:last-child {
  border-bottom: none;
}

.documentHeader,
.documentBody,
.documentFooter {
  display: flex;
  flex-direction: row;
  flex: 0 1 auto;
  width: 100%;
  align-items: center;
}

.documentFooter {
  cursor: default;
}

.header {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  flex-grow: 1;
  align-items: center;
  justify-content: space-between;
}

.headerLeft {
/*  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  flex: 1;*/
  align-items: center;

/*
  & * {
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    margin-right: 5px;
    align-items: center;
  }
  */
}

.cell,
.columnHeader,
.columnFooter {
  //display: flex;
  //justify-content: center;
}

.cell {
  //border-right: 1px solid #666;
}
.cell:last-child {
  //border-right: none;
}

.cell {
  /*
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  width: 100%;
  */
}

.headerContainer,
.footerContainer {
  display: flex;
  flex: 1 0 auto;
  flex-direction: column;
  justify-content: center;
  padding: 0.3em;
  position: relative;
  /*
  font-size:0.8em;
  */
}

.cellContent {
  display: flex;
  flex: 1 0 auto;
  height: 100%;
  flex-direction: column;
  justify-content: center;
  padding: 0.3em;
  overflow: visible;
}

.columnHeader,
.columnFooter {
  /*
  display: flex;
  flex: 1 0 auto;
  flex-direction: column;
  flex-wrap:nowrap;
  margin: 0;
  padding: 0;
  font-weight:bold;
  */
}

.columnFooter {
  font-size:0.9rem;
}

.columnHeader h3 {
  cursor: default;
}

.gridHeader button,
.gridFooter button,
.headerContainer button,
.footerContainer button {
  border: 1px solid transparent;
  cursor: pointer;
  background-color: transparent;
  font-size:0.8em;
}

.documentHeaderContent,
.documentFooterContent {
  width:100%;
}

.pane {
  position: absolute;
  /* flex: 1 1 auto;
  display: flex; */
  z-index: 1000;
  top:24px;
  right: 0px;
  /* right: 0;
  padding:0; */
  animation-duration: 300ms;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  /* overflow: auto; */
  overflow-y: auto;
  overflow-x: hidden;
  visibility: hidden;
  margin-right: auto;
  margin-left: auto;
  width: auto;
  will-change: overflow, transform, clip-path, visibility;

  &::-webkit-scrollbar-track {
    background-color: rgb(40, 40, 40);
  }

  &::-webkit-scrollbar {
    width: 6px;
    height: 6px;
    background-color: rgb(10, 160, 217);
  }

  &::-webkit-scrollbar-thumb {
    background-color: rgb(10, 160, 217);
  }
}


.paneHidden .pane {
  clip-path: polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%);
  transform: translateY(-100%);
  display: none;
}

.paneVisible .pane,
.paneTransition.paneHidden .pane {
  visibility: visible;
  clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
  transform: translateY(0%);
}

.paneTransition.paneVisible .pane {
  overflow:hidden !important;
  animation-name: pane-slide-in;
}

.paneTransition.paneVisible .pane {
  overflow:hidden !important;
  animation-name: pane-slide-out;
}


@keyframes pane-slide-in {
  from {
    clip-path: polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%);
    transform: translateY(-100%);
  }
  to {
    clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
    transform: translateY(0%);
  }
}

@keyframes pane-slide-out {
  from {
    clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
    transform: translateY(0%);
  }
  to {
    clip-path: polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%);
    transform: translateY(-100%);
  }
}


.logo {
  font-family: var(--header-font);
  font-size:1.8rem;
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
}

a:hover .logo {
  animation-duration: 2s;
  animation-name: hovery;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

@keyframes hovery {
  from {
    transform: rotate3d(0, 1, 0, 0deg);
    text-shadow: none;
  }
  50% {
    transform: rotate3d(0.2, 1, 0, 180deg);
    text-shadow: 2px 2px rgba(255, 255, 255, 0.3);
  }
  to {
    transform: rotate3d(0, 1, 0, 360deg);
  }
}
